##
# @author Adrian Amoroso <aamoroso@deloitte.com.au>
# @date   8 May 2018
#
#
service: transcribe

provider:
  name: aws
  runtime: python3.7
  timeout: 100              # optional, in seconds, default is 6
  region: ap-southeast-2
  profile: ${self:custom.profiles.${self:custom.stage}}

  logRetentionInDays: 14    # Set the default RetentionInDays for a CloudWatch LogGroup

  stackTags:                # Optional CF stack tags
    STACK: "${self:service}"
    REGION: "${self:provider.region}"

  # If the 'serverless' command is provided a stage using '--stage' parameter, it
  # will be available as ${opt:stage}.
  # In the 'custom' section (further down) we set ${self:custom.stage} to be ${opt:stage} if it exists,
  # or otherwise ${self:provider.stage}.  The latter is defaulted immediately below...
  #
  # So, during development we can safely deploy with 'serverless deploy', but during production we can do
  # 'serverless deploy --stage prod' and the stage will be picked up without having to make any
  # changes to serverless.yml.
  #
  stage: dev

  # Specify a deployment bucket name. Default is generated by the framework
  #deploymentBucket:
  #  name: ${self:custom.deploymentbuckets.${self:custom.stage}}


  # Add statements to the Lambda function's IAM Role
  #
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
        - "lambda:GetFunction"
      Resource: "*"                 # @TODO  Naughty!


package:
  include:
    - vendor/**
  exclude:
    - secrets.yml
    - package.json
    - requirements.txt
    - .git/**


# Lambda Functions
#
functions:
  startTranscribe:
    handler: trigger.handler
    environment:
      TRANSCRIPTION_FUNCTION: { 'Ref': 'TranscriptionLambda' }

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
custom:
  stage: ${opt:stage, self:provider.stage}            # See comments in 'provider' section, above
  #secrets: ${file(secrets.yml):${self:custom.stage}}

  profiles:
    dev: connect-westpac        # Assuming the default AWS CLI config is for 'dev'.
    prod: prod          # See ~/.aws/config

  lambdabucket:
   dev: ${opt:lambdabucket, 'westpac-connect-dev-serverlessdeploymentbucket-1kuocgsg5k24s'}

  recordingsbucket:
    dev: ${opt:recordingsbucket, 'connect-ff2131b4d46b'}

  pythonRequirements:
    dockerizePip: false
    pythonBin: ${opt:pythonBin, self:provider.runtime}


resources:
  Resources:
    TranscriptionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # TableName: ${self:custom.transcribetable}
        AttributeDefinitions:
          - AttributeName: ContactId
            AttributeType: S
          - AttributeName: StartTime
            AttributeType: N
        KeySchema:
          - AttributeName: ContactId
            KeyType: HASH
          - AttributeName: StartTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    TranscriptionPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Query"
                - "dynamodb:Scan"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
              Resource: { "Fn::Join": [ "", [ "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/", {"Ref": "TranscriptionTable" }, "*" ] ] }
            - Effect: "Allow"
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "lambda:InvokeFunction"
                - "lambda:GetFunction"
                - "connect:StartOutboundVoiceContact"           # Allow lambda to initiate a contact flow to place an outbound call to a customer
                - "kinesisvideo:*"
              Resource: "*"                 # @TODO  Naughty!

            - Effect: "Allow"
              Action:
                - "comprehend:DetectSentiment"
              Resource: "*"                 # @TODO  Naughty! replace with arn of analyse-sentiment lambda: arn:aws:sts::215282317720:assumed-role/voice-analysis-dev-us-east-1-lambdaRole/voice-analysis-dev-analyse-sentiment

            - Effect: "Allow"
              Action:
                - "transcribe:StartTranscriptionJob"
                - "transcribe:GetTranscriptionJob"
                - "transcribe:StartStreamTranscription"
              Resource: "*"                 # @TODO  Naughty!
            - Effect: "Allow"
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
              Resource: "arn:aws:s3:::${self:custom.recordingsbucket.${self:custom.stage}}/*"

    TranscriptionLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - !Ref TranscriptionPolicy
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com

    TranscriptionLambda:
      Type: AWS::Lambda::Function
      Properties:
        Description: Transcribes Kinesis Video stream audio to a DynamoDB table
        Handler: com.amazonaws.kvstranscribestreaming.KVSTranscribeStreamingLambda::handleRequest
        Role: !GetAtt TranscriptionLambdaRole.Arn
        Runtime: java8
        Timeout: '900'
        MemorySize: 1024
        Code:
          S3Bucket: ${self:custom.lambdabucket.${self:custom.stage}}
          S3Key: amazon-connect-realtime-transcription.zip
        Environment:
          Variables:
            APP_REGION: ${self:provider.region}
            TRANSCRIBE_REGION: ${self:provider.region}
            RECORDINGS_BUCKET_NAME: ${self:custom.recordingsbucket.${self:custom.stage}}
            RECORDINGS_KEY_PREFIX: "connect/wbc-connect/UtteranceRecordings"
            RECORDINGS_PUBLIC_READ_ACL: FALSE
            INPUT_KEY_PREFIX: audio-file-input/
            CONSOLE_LOG_TRANSCRIPT_FLAG: TRUE
            TABLE_CALLER_TRANSCRIPT: !Ref TranscriptionTable
            SAVE_PARTIAL_TRANSCRIPTS: FALSE
            START_SELECTOR_TYPE: FRAGMENT_NUMBER
